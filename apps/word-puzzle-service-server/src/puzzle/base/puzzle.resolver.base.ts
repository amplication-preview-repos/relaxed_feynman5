/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Puzzle } from "./Puzzle";
import { PuzzleCountArgs } from "./PuzzleCountArgs";
import { PuzzleFindManyArgs } from "./PuzzleFindManyArgs";
import { PuzzleFindUniqueArgs } from "./PuzzleFindUniqueArgs";
import { CreatePuzzleArgs } from "./CreatePuzzleArgs";
import { UpdatePuzzleArgs } from "./UpdatePuzzleArgs";
import { DeletePuzzleArgs } from "./DeletePuzzleArgs";
import { SubmissionFindManyArgs } from "../../submission/base/SubmissionFindManyArgs";
import { Submission } from "../../submission/base/Submission";
import { PuzzleService } from "../puzzle.service";
@graphql.Resolver(() => Puzzle)
export class PuzzleResolverBase {
  constructor(protected readonly service: PuzzleService) {}

  async _puzzlesMeta(
    @graphql.Args() args: PuzzleCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Puzzle])
  async puzzles(@graphql.Args() args: PuzzleFindManyArgs): Promise<Puzzle[]> {
    return this.service.puzzles(args);
  }

  @graphql.Query(() => Puzzle, { nullable: true })
  async puzzle(
    @graphql.Args() args: PuzzleFindUniqueArgs
  ): Promise<Puzzle | null> {
    const result = await this.service.puzzle(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Puzzle)
  async createPuzzle(@graphql.Args() args: CreatePuzzleArgs): Promise<Puzzle> {
    return await this.service.createPuzzle({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Puzzle)
  async updatePuzzle(
    @graphql.Args() args: UpdatePuzzleArgs
  ): Promise<Puzzle | null> {
    try {
      return await this.service.updatePuzzle({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Puzzle)
  async deletePuzzle(
    @graphql.Args() args: DeletePuzzleArgs
  ): Promise<Puzzle | null> {
    try {
      return await this.service.deletePuzzle(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Submission], { name: "submissions" })
  async findSubmissions(
    @graphql.Parent() parent: Puzzle,
    @graphql.Args() args: SubmissionFindManyArgs
  ): Promise<Submission[]> {
    const results = await this.service.findSubmissions(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
