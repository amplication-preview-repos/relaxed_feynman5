/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Puzzle as PrismaPuzzle,
  Submission as PrismaSubmission,
} from "@prisma/client";

export class PuzzleServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.PuzzleCountArgs, "select">): Promise<number> {
    return this.prisma.puzzle.count(args);
  }

  async puzzles(args: Prisma.PuzzleFindManyArgs): Promise<PrismaPuzzle[]> {
    return this.prisma.puzzle.findMany(args);
  }
  async puzzle(
    args: Prisma.PuzzleFindUniqueArgs
  ): Promise<PrismaPuzzle | null> {
    return this.prisma.puzzle.findUnique(args);
  }
  async createPuzzle(args: Prisma.PuzzleCreateArgs): Promise<PrismaPuzzle> {
    return this.prisma.puzzle.create(args);
  }
  async updatePuzzle(args: Prisma.PuzzleUpdateArgs): Promise<PrismaPuzzle> {
    return this.prisma.puzzle.update(args);
  }
  async deletePuzzle(args: Prisma.PuzzleDeleteArgs): Promise<PrismaPuzzle> {
    return this.prisma.puzzle.delete(args);
  }

  async findSubmissions(
    parentId: string,
    args: Prisma.SubmissionFindManyArgs
  ): Promise<PrismaSubmission[]> {
    return this.prisma.puzzle
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .submissions(args);
  }
}
